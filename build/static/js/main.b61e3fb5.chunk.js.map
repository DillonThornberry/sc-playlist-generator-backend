{"version":3,"sources":["components/SearchUser.js","components/UserCard.js","components/SearchResults.js","components/ChooseOptions.js","components/SongCard.js","components/PlayMusic.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["SearchUser","props","id","onSubmit","e","preventDefault","searchQuery","target","searchbar","value","split","join","placeholder","length","fetch","then","res","json","data","setResults","type","inputMode","spellcheck","name","style","src","alt","UserCard","className","onClick","selectUser","user","avatar_url","username","SearchResults","results","color","map","ChooseOptions","fetchedAlready","clearUser","mine","their","message","document","querySelector","innerHTML","trackList","setSongList","for","SongCard","isPlaying","index","changeSong","song","artwork_url","title","PlayMusic","widgetBaseUrl","widgetArgs","state","currentSong","songList","bind","this","setState","indexOf","clearPlaylist","width","height","scrolling","frameborder","allow","i","nextPage","getNextPage","Component","Main","searchResults","setSearchResults","console","log","np","userId","cursor","removeDuplicateSongs","concat","filter","seen","filteredList","uri","push","userList","playList","x","React","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b61e3fb5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function SearchUser(props) {\r\n\r\n    const searchUser = e => {\r\n        e.preventDefault()\r\n        const searchQuery = e.target.searchbar.value.split(' ').join('+')\r\n        e.target.searchbar.value = ''\r\n        e.target.searchbar.placeholder = 'searching...'\r\n        if (!searchQuery.length) { return }\r\n        fetch('/search?q=' + searchQuery).then(res => res.json()).then(data => {\r\n            props.setResults(data)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id=\"home-page\">\r\n            <div id=\"logo-and-search\">\r\n                <h1 id=\"logo\">SoundCloud Playlist Generator</h1>\r\n                <form id=\"search-form\" onSubmit={searchUser}>\r\n                    <input type=\"search\" inputMode=\"search\" spellcheck=\"false\" name=\"searchbar\" placeholder=\"enter SC username\" />\r\n                    <button type=\"submit\" style={{\"background-color\": \"\"}}><img src=\"/search.svg\" alt=\"search\" /></button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function UserCard(props) {\r\n    return (\r\n        <div className=\"user-card\" onClick={() => props.selectUser(props.user)}>\r\n            <img className=\"user-img\" src={props.user.avatar_url} />\r\n            <p className=\"user-title\">{props.user.username}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport UserCard from './UserCard'\r\n\r\nexport default function SearchResults(props) {\r\n    return (\r\n        <div>\r\n            <button onClick={() => props.setResults(null)}>Back to Search</button>\r\n            <div id=\"results-container\">\r\n                {!props.results.length ? <h1 style={{color: \"white\"}}>No results found</h1> : null}\r\n                <div id=\"user-list\">\r\n                    {props.results.map(user => <UserCard user={user} selectUser={props.selectUser} />)}\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ChooseOptions(props) {\r\n    var fetchedAlready = false\r\n    const getPlaylist = e => {\r\n        e.preventDefault()\r\n        var mine = e.target.mine.value\r\n        var their = e.target.their.value\r\n\r\n        if (mine && their && !fetchedAlready) {\r\n            fetchedAlready = true\r\n            var message = document.querySelector('#generating')\r\n            message.innerHTML = \"Generating Playlist...\"\r\n            \r\n            fetch(`/playlist?userId=${props.user.id}&mine=${mine}&their=${their}`)\r\n            .then(res => res.json()).then(data => {\r\n                if (data.trackList){\r\n                    props.setSongList(data)\r\n                } else {\r\n                    message.innerHTML = \"no results\"\r\n                    fetchedAlready = false\r\n                }\r\n                \r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={props.clearUser}>back</button>\r\n         \r\n                <form id=\"option-menu\" onSubmit={getPlaylist}>\r\n                <div id=\"selection-menu-container\">\r\n                    <div className=\"btn-group-vertical selection-buttons\">\r\n                        <input id=\"liked-tracks\" type=\"radio\" name=\"mine\" value=\"favorites\"></input>\r\n                        <label for=\"liked-tracks\">Liked Tracks</label>\r\n                        <input id=\"followed-artists\" type=\"radio\" name=\"mine\" value=\"followings\"></input>\r\n                        <label for=\"followed-artists\">Followed Artists</label>\r\n                        <input id=\"followers\" type=\"radio\" name=\"mine\" value=\"followers\"></input>\r\n                        <label for=\"followers\">Followers</label>\r\n                    </div>\r\n\r\n                    <div className=\"btn-group-vertical selection-buttons\">\r\n                        <input id=\"recent-track\" type=\"radio\" name=\"their\" value=\"recenttrack\"></input>\r\n                        <label for=\"recent-track\">Most Recent Release</label>\r\n                        <input id=\"top-track\" type=\"radio\" name=\"their\" value=\"toptrack\"></input>\r\n                        <label for=\"top-track\">Most Liked Track</label>\r\n                        <input id=\"recent-like\" type=\"radio\" name=\"their\" value=\"favorites\"></input>\r\n                        <label for=\"recent-like\">Most Recent Like</label>\r\n                    </div>\r\n                </div>\r\n                <div id=\"submit-button-container\">\r\n                    <button id=\"generate-playlist\" type=\"submit\">Generate Playlist</button>\r\n                    <h3 id=\"generating\"></h3>\r\n                </div>\r\n                </form>\r\n                \r\n             \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SongCard(props) {\r\n    const altImage = \"http://service-line.co.uk/wp-content/uploads/2016/05/PPM-Services-Icon-100x100.png\"\r\n    return (\r\n        <div className={\"song-card\" + (props.isPlaying(props.index) ? \" song-card-playing\" : \"\")}\r\n        onClick={() => props.changeSong(props.index)}>\r\n            <img className=\"song-art\" src={props.song.artwork_url || altImage} alt=\"\" />\r\n            <h1 className=\"song-title\">{props.song.title}</h1>\r\n            <h2 className=\"song-artist\">{props.song.user.username}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n// {props.isPlaying(props.index) ? \"song-card-playing\" : \"song-card\"}","import React, { Component } from 'react'\r\nimport SongCard from './SongCard'\r\n\r\nexport default class PlayMusic extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.widgetBaseUrl = \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/\"\r\n        this.widgetArgs = \"&color=%23FF5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=false&visual=true\"\r\n        this.state = {\r\n            currentSong: this.props.songList[0]\r\n        }\r\n        this.changeSong = this.changeSong.bind(this)\r\n        this.isPlaying = this.isPlaying.bind(this)\r\n    }\r\n\r\n    changeSong(index){\r\n        this.setState({ currentSong: this.props.songList[index] })\r\n    }\r\n\r\n    isPlaying(index){\r\n        return this.props.songList.indexOf(this.state.currentSong) === index\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.clearPlaylist}>back</button>\r\n                <iframe width=\"100%\" height=\"150\" scrolling=\"no\" frameborder=\"no\" allow=\"autoplay\" \r\n                src={this.widgetBaseUrl + this.state.currentSong.id + this.widgetArgs}></iframe>\r\n                <div id=\"song-container\">\r\n                    {this.props.songList.map((song, i) => \r\n                        <SongCard song={song} index={i} changeSong={this.changeSong} isPlaying={this.isPlaying}/> )}\r\n                    { this.props.nextPage &&\r\n                    <button id=\"next-page-button\" onClick={this.props.getNextPage}>Load next page</button> }\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport SearchUser from './SearchUser'\r\nimport SearchResults from './SearchResults'\r\nimport ChooseOptions from './ChooseOptions'\r\nimport PlayMusic from './PlayMusic'\r\n\r\nexport default class Main extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            user: null,\r\n            searchResults: null,\r\n            songList: null,\r\n            nextPage: null,\r\n        }\r\n        this.clearPlaylist = this.clearPlaylist.bind(this)\r\n        this.getNextPage = this.getNextPage.bind(this)\r\n        this.selectUser = this.selectUser.bind(this)\r\n        this.setSearchResults = this.setSearchResults.bind(this)\r\n        this.setSongList = this.setSongList.bind(this)\r\n    }\r\n\r\n    clearPlaylist(){\r\n        this.setState({\r\n            songList: null,\r\n            nextPage: null,\r\n        })\r\n    }\r\n\r\n    getNextPage(){\r\n        console.log('getNextPage called')\r\n        this.setState({ nextPage: null })\r\n        const np = this.state.nextPage\r\n        fetch(`/playlist?userId=${np.userId}&mine=${np.mine}&their=${np.their}&cursor=${np.cursor}`)\r\n        .then(res => res.json()).then(data => {\r\n            console.log('in fetch')\r\n            if (!this.state.songList || !this.state.user){ return }\r\n            this.setState({\r\n                songList: this.removeDuplicateSongs(this.state.songList.concat(data.trackList.filter(song => !!song))),\r\n                nextPage: data.nextPage\r\n            })\r\n        })\r\n    }\r\n\r\n    removeDuplicateSongs(songList){\r\n        var seen = {}\r\n        var filteredList = []\r\n        for (var song of songList){\r\n            if (!seen[song.uri]){\r\n                filteredList.push(song)\r\n                seen[song.uri] = 1\r\n            }\r\n        }\r\n        return filteredList\r\n    }\r\n\r\n    selectUser(user){\r\n        this.setState({\r\n            user: user,\r\n            searchResults: null,\r\n        })\r\n    }\r\n\r\n    setSearchResults(userList){\r\n        this.setState({ searchResults: userList })\r\n    }\r\n\r\n    setSongList(playList){\r\n        if (!this.state.user){\r\n            return\r\n        }\r\n        this.setState({\r\n            songList: this.removeDuplicateSongs(playList.trackList.filter(x => !!x)),\r\n            nextPage: playList.nextPage\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                { !this.state.user && !this.state.searchResults && \r\n                <SearchUser setResults={this.setSearchResults} /> }\r\n\r\n                { this.state.searchResults && \r\n                <SearchResults results={this.state.searchResults} selectUser={this.selectUser} \r\n                    setResults={this.setSearchResults}/> }\r\n\r\n                { this.state.user && !this.state.songList && \r\n                <ChooseOptions user={this.state.user} setSongList={this.setSongList} \r\n                clearUser={() => this.selectUser(null)} /> }\r\n\r\n                { this.state.songList && \r\n                <PlayMusic songList={this.state.songList} nextPage={this.state.nextPage} \r\n                getNextPage={this.getNextPage} clearPlaylist={this.clearPlaylist} /> }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}